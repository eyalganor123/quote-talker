{"version":3,"sources":["Buttons.js","App.js","reportWebVitals.js","index.js"],"names":["Buttons","handleSpeak","handleNext","browser","className","onClick","speech","Speech","supported","hasBrowserSupport","console","log","init","volume","lang","rate","pitch","h2","document","getElementById","author","toSpeak","innerText","speak","text","queue","App","fetch","then","res","json","setState","quote","content","body","style","backgroundImage","Math","floor","random","state","this","cite","id","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"8QAGe,SAASA,EAAT,GAAwD,IAArCC,EAAoC,EAApCA,YAAaC,EAAuB,EAAvBA,WAE7C,OAFoE,EAAXC,QAIrD,sBAAKC,UAAU,oBAAf,UACE,wBAAQC,QAASJ,EAAjB,mBACA,wBAAQI,QAASH,EAAjB,qBAKF,8BACE,wBAAQG,QAASH,EAAjB,oB,UCVFI,EAAS,IAAIC,IACfC,GAAY,EACbF,EAAOG,qBACNC,QAAQC,IAAI,8BACbD,QAAQC,IAAIH,IAEbA,GAAY,EAGdF,EAAOM,KAAK,CACVC,OAAQ,GACRC,KAAM,QACNC,KAAM,EACNC,MAAO,KAIT,IAAMf,EAAc,WAClB,IAAMgB,EAAKC,SAASC,eAAe,MAC7BC,EAASF,SAASC,eAAe,UACjCE,EAAUJ,EAAGK,UAAUF,EAAOE,UACpChB,EACGiB,MAAM,CACLC,KAAMH,EACNI,OAAO,KA6CEC,E,kDAxCb,aAAe,IAAD,8BACZ,gBAQFxB,WAAa,WACXyB,MAAM,kCAAkCC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAAQF,MAAK,SAAAJ,GAAI,OAAI,EAAKO,SAAS,CAAEC,MAAOR,EAAKS,QAASb,OAAQI,EAAKJ,YAC5HQ,KAAK3B,GACNiB,SAASgB,KAAKC,MAAMC,gBAApB,qCAAoEC,KAAKC,MAAM,GAAAD,KAAKE,SAAqB,KAAzG,YAAiHF,KAAKC,MAAM,GAAAD,KAAKE,SAAqB,KAAtJ,OAVF,EAAKC,MAAQ,CACXR,MAAO,KACPZ,OAAQ,KACRjB,QAASK,GALC,E,qDAed,WAAqB,IAAD,OAClBE,QAAQC,IAAI8B,KAAKD,MAAMrC,SACvBwB,MAAM,kCAAkCC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAAQF,MAAK,SAAAJ,GAAI,OAAI,EAAKO,SAAS,CAAEC,MAAOR,EAAKS,QAASb,OAAQI,EAAKJ,c,oBAIjI,WACE,OACE,sBAAKhB,UAAU,OAAf,UAEE,wBAAQA,UAAU,YAAlB,SACE,6BAAYsC,KAAK,uCAAjB,UACE,mBAAGC,GAAG,KAAN,SAAYF,KAAKD,MAAMR,QACvB,6BAAYW,GAAG,SAAf,eAA2BF,KAAKD,MAAMpB,eAI1C,cAAC,EAAD,CAASnB,YAAaA,EAAaC,WAAYuC,KAAKvC,WAAYC,QAASsC,KAAKD,MAAMrC,iB,GAjC1EyC,aCrBHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBnB,MAAK,YAAkD,IAA/CoB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFrC,SAASC,eAAe,SAM1B0B,M","file":"static/js/main.2dc17083.chunk.js","sourcesContent":["import React from 'react';\nimport \"./Buttons.css\"\n\nexport default function Buttons({ handleSpeak, handleNext, browser }) {\n\n  if (browser) {\n    return (\n      <div className=\"buttons-container\">\n        <button onClick={handleSpeak}>speak</button>\n        <button onClick={handleNext}>next</button>\n      </div>\n    )\n  } else {\n    return (\n      <div>\n        <button onClick={handleNext}>next</button>\n      </div>\n    )\n  }\n}\n","import React, { Component } from 'react';\nimport Speech from \"speak-tts\";\nimport Buttons from './Buttons'\n\nimport './App.css';\nconst speech = new Speech();\nlet supported = true;\nif(speech.hasBrowserSupport()) { // returns a boolean\n    console.log(\"speech synthesis supported\")\n   console.log(supported)\n  }else{\n  supported = false\n}\n\nspeech.init({\n  volume: 0.5,\n  lang: \"en-US\",\n  rate: 1,\n  pitch: .4,\n\n\n});\nconst handleSpeak = () => {\n  const h2 = document.getElementById('h2');\n  const author = document.getElementById('author');\n  const toSpeak = h2.innerText+author.innerText\n  speech\n    .speak({\n      text: toSpeak,\n      queue: false\n    })\n}\n\nclass App extends Component {\n  constructor() {\n    super()\n    this.state = {\n      quote: null,\n      author: null,\n      browser: supported\n    }\n\n  }\n  handleNext = () => {\n    fetch(\"https://api.quotable.io/random\").then(res => res.json()).then(text => this.setState({ quote: text.content, author: text.author }))\n      .then(handleSpeak)\n      document.body.style.backgroundImage = `url('https://picsum.photos/${Math.floor(Math.random()*(500-480+1)+480)}/${Math.floor(Math.random()*(500-480+1)+480)}')`;\n  }\n\n  componentDidMount() {\n    console.log(this.state.browser)\n    fetch(\"https://api.quotable.io/random\").then(res => res.json()).then(text => this.setState({ quote: text.content, author: text.author }))\n  }\n\n\n  render() {\n    return (\n      <div className=\"flex\">\n\n        <figure className=\"container\">\n          <blockquote cite=\"https://www.huxley.net/bnw/four.html\">\n            <p id=\"h2\">{this.state.quote}</p>\n            <figcaption id=\"author\">- {this.state.author}</figcaption>\n          </blockquote>\n          \n        </figure>\n        <Buttons handleSpeak={handleSpeak} handleNext={this.handleNext} browser={this.state.browser}/>\n     \n      </div>\n    )\n  }\n}\n\n\nexport default App;\n\n\n// todo: fetch the next image and set it ","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}